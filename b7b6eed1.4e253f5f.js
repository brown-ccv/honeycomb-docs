(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var i=n(0),r=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,h=p["".concat(a,".").concat(d)]||p[d]||b[d]||o;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var i=n(3),r=n(7),o=(n(0),n(101)),a={id:"online_integration",title:"Deploy online"},l={unversionedId:"online_integration",id:"version-1.1.0/online_integration",isDocsHomePage:!1,title:"Deploy online",description:"Usage with PsiTurk",source:"@site/versioned_docs/version-1.1.0/online_integtration.md",slug:"/online_integration",permalink:"/honeycomb-docs/docs/1.1.0/online_integration",editUrl:"https://github.com/brown-ccv/honeycomb-docs/edit/main/versioned_docs/version-1.1.0/online_integtration.md",version:"1.1.0",lastUpdatedAt:1623787793,sidebar:"version-1.1.0/someSidebar",previous:{title:"Set up event triggers",permalink:"/honeycomb-docs/docs/1.1.0/event_triggers"},next:{title:"Troubleshooting",permalink:"/honeycomb-docs/docs/1.1.0/troubleshooting"}},s=[{value:"Usage with PsiTurk",id:"usage-with-psiturk",children:[{value:"Prebuilt version",id:"prebuilt-version",children:[]},{value:"Build instructions",id:"build-instructions",children:[]},{value:"Running psiturk",id:"running-psiturk",children:[]}]},{value:"Running on the Web",id:"running-on-the-web",children:[]}],c={toc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"usage-with-psiturk"},"Usage with PsiTurk"),Object(o.b)("p",null,"While this set up is optimized for Electron, we added functionality that will make use with PsiTurk easy. The application will detect if it's being used in a Turk environment and will:  "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Save the data to the default PsiTurk SQLite database.  "),Object(o.b)("li",{parentName:"ul"},"Switch the language to Turk specific, if ",Object(o.b)("inlineCode",{parentName:"li"},"src/language/<locale>.mturk.json")," exists.  "),Object(o.b)("li",{parentName:"ul"},"Use the Turk specific timeline if different than the primary timeline.  ")),Object(o.b)("h3",{id:"prebuilt-version"},"Prebuilt version"),Object(o.b)("p",null,"When GitHub Actions is run, a psiturk build will be created automatically, and can be downloaded from its artifacts (skip next step if using). The workflows responsible for building the PsiTurk application are ",Object(o.b)("inlineCode",{parentName:"p"},".github/workflows/package-home-all.yml")," and ",Object(o.b)("inlineCode",{parentName:"p"},".github/workflows/release-home-all.yml"),". The first one has to be triggered manually, the latter is triggered when you tag a release."),Object(o.b)("h3",{id:"build-instructions"},"Build instructions"),Object(o.b)("p",null,"To set up your PsiTurk project, we provide a script that does the conversion.\nPsiTurk is a Python package used to manage HITs in Mechanical Turk. Before using the provided script, install ",Object(o.b)("a",{parentName:"p",href:"https://psiturk.org/"},"PsiTurk"),"."),Object(o.b)("p",null,"You'll need to follow these steps (the path to the PsiTurk project should be a directory you wish to be created):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Build the application: ",Object(o.b)("inlineCode",{parentName:"p"},"npm run build"),"  ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Move to the ",Object(o.b)("inlineCode",{parentName:"p"},"psiturkit")," directory: ",Object(o.b)("inlineCode",{parentName:"p"},"cd psiturkit"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If it's the first time you're running the script:",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"./psiturk-it -p <PATH_TO_NEW_PSITURK_PROJECT>"),"  ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"To update an existing PsiTurk project (the path to the PsiTurk project should already exist from the previous steps):",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"./psiturk-it -u -p <PATH_TO_NEW_PSITURK_PROJECT>")))),Object(o.b)("h3",{id:"running-psiturk"},"Running psiturk"),Object(o.b)("p",null,"After that, just navigate to your newly created PsiTurk project directory."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"shell> psiturk #start psiturk\npsiturk> server on #start server\npsiturk> debug #debug mode\n")),Object(o.b)("h2",{id:"running-on-the-web"},"Running on the Web"),Object(o.b)("p",null,"Running ",Object(o.b)("inlineCode",{parentName:"p"},"npm run build")," generates static content into the ",Object(o.b)("inlineCode",{parentName:"p"},"build")," directory that can be served using any static contents hosting service. The workflow ",Object(o.b)("inlineCode",{parentName:"p"},".github/workflows/release-home-all.yml")," uploads the build directory to the ",Object(o.b)("inlineCode",{parentName:"p"},"gh-branch")," to serve the application on GitHub pages as an example. After a creating a tag, the workflow will run and your application will be served at ",Object(o.b)("inlineCode",{parentName:"p"},"<githubuser>.github.io/<repository>"),".\nFor this step to succeed you will need to create a deploy key and enable GitHub Pages for your repository."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Generate a new ",Object(o.b)("a",{parentName:"li",href:"https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"},"SSH key"),"."),Object(o.b)("li",{parentName:"ol"},"By default, your public key should have been created in ",Object(o.b)("inlineCode",{parentName:"li"},"~/.ssh/id_rsa.pub")," or use the name you've provided."),Object(o.b)("li",{parentName:"ol"},"Copy key to clipboard with ",Object(o.b)("inlineCode",{parentName:"li"},"xclip -sel clip < ~/.ssh/id_rsa.pub")," and paste it as a ",Object(o.b)("a",{parentName:"li",href:"https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys"},"deploy key")," in your repository. Copy file content if the command line doesn't work for you. Check the box for ",Object(o.b)("inlineCode",{parentName:"li"},"Allow write access")," before saving your deployment key."),Object(o.b)("li",{parentName:"ol"},"You'll need your private key as a ",Object(o.b)("a",{parentName:"li",href:"https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets"},"GitHub secret")," to allow the workflow to run the deployment for you."),Object(o.b)("li",{parentName:"ol"},"To create the secret copy your private key e.g. ",Object(o.b)("inlineCode",{parentName:"li"},"xclip -sel clip < ~/.ssh/id_rsa")," and paste a GitHub secret with name ",Object(o.b)("inlineCode",{parentName:"li"},"GH_PAGES_DEPLOY"),". Copy file content if the command line doesn't work for you. Save your secret."),Object(o.b)("li",{parentName:"ol"},"Make sure the ",Object(o.b)("a",{parentName:"li",href:"https://help.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"},"publishing source")," for your repository is configured for ",Object(o.b)("inlineCode",{parentName:"li"},"gh-pages")," branch.")))}u.isMDXComponent=!0}}]);