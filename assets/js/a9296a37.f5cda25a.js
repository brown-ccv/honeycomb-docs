"use strict";(self.webpackChunkhoneycomb=self.webpackChunkhoneycomb||[]).push([[775],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9348:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var n=a(3117),r=(a(7294),a(3905));const i={id:"variants",title:"Variants"},s=void 0,o={unversionedId:"variants",id:"variants",title:"Variants",description:"Variant Specific Executables",source:"@site/docs/variants.md",sourceDirName:".",slug:"/variants",permalink:"/honeycomb-docs/docs/variants",draft:!1,editUrl:"https://github.com/brown-ccv/honeycomb-docs/edit/main/docs/variants.md",tags:[],version:"current",lastUpdatedAt:1660073831,formattedLastUpdatedAt:"Aug 9, 2022",frontMatter:{id:"variants",title:"Variants"}},l={},c=[{value:"Variant Specific Executables",id:"variant-specific-executables",level:2},{value:"Variant Specific Workflows",id:"variant-specific-workflows",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"variant-specific-executables"},"Variant Specific Executables"),(0,r.kt)("p",null,"In order to create multiple variants of a task that can be co-installed, it is necessary to add new scripts to the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file in addition to creating the necessary environment variables for configuration. Each variant must have a unique, lowercase name. Optionally, a unique icon can be used for each variant by saving multiple icons to the icons directories with the same names as the variants. Example scripts for Windows, Mac, and Linux are shown below. "),(0,r.kt)("p",null,"Windows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"package:windows:<task_name>: "electron-packager . <task_name> --platform win32 --arch x64 --icon ./assets/icons/win/<task_name> --out dist/ --overwrite --asar ",\n"postpackage:windows:<task_name>": "electron-installer-windows --src dist/<task_name>-win32-x64/ --dest dist/installers/ --overwrite --homepage https://ccv.brown.edu/ --name <task_name> --exe <task_name>.exe --productName <task_name>"\n')),(0,r.kt)("p",null,"Mac:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"package:mac:,<task_name>: "electron-packager . <task_name> --platform darwin --arch x64 --out dist/ --icon ./assets/icons/mac/<task_name>.icns --overwrite",\n"installer:mac:<task_name>": "electron-installer-dmg ./dist/<task_name>-darwin-x64/<task_name>.app <task_name>-${npm_package_version} --out ./dist/installers/ --icon ./assets/icons/mac/<task_name>.icns --overwrite"\n')),(0,r.kt)("p",null,"Linux:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"package:linux:<task_name>": "electron-packager . <task_name> --platform linux --arch x64 --icon ./assets/icons/mac/<task_name> --out dist/ --overwrite",\n"postpackage:linux:<task_name>": "electron-installer-debian --src dist/<task_name>-linux-x64/ --dest dist/installers/ --arch x64 --overwrite --name <task_name> --productName <task_name> --genericName <task_name> --bin <task_name>"\n')),(0,r.kt)("h2",{id:"variant-specific-workflows"},"Variant Specific Workflows"),(0,r.kt)("p",null,"In order to use Github workflows to build and upload executables for each variant, the ",(0,r.kt)("inlineCode",{parentName:"p"},"build.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"release.yaml")," files must be modified as well. For all three files, a new row should be added to the matrix variable as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"variant: [<comma_separated_list_of_variant_names>]\n")),(0,r.kt)("p",null,"Add the following before npm build in the steps section of ",(0,r.kt)("inlineCode",{parentName:"p"},"build.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"release.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  - name: Load .env file for variant\n    uses: xom9ikk/dotenv@v1.0.2\n    with:\n      path: ./env\n      mode: ${{matrix.variant}}\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yaml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"release.yaml"),", replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"# Build electron app package installers")," section with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  - name: package electron - windows\n    if: startsWith(matrix.os, 'windows')\n    run: npm run package:windows:${{ matrix.variant }}\n  - name: package electron - linux\n    if: startsWith(matrix.os, 'ubuntu')\n    run: npm run package:linux:${{ matrix.variant }}\n  - name: package electron - mac\n    if: startsWith(matrix.os, 'mac')\n    run: npm run package:mac:${{ matrix.variant }}\n  - name: npm rebuild - mac\n    if: startsWith(matrix.os, 'mac')\n    run: npm rebuild\n  - name: Mac installer\n    if: startsWith(matrix.os, 'mac')\n    run: npm run installer:mac:${{ matrix.variant }}\n")),(0,r.kt)("p",null,"Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"# Upload installers to github action")," section in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yaml")," with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  - name: upload win-installer\n    uses: actions/upload-artifact@master\n    if: startsWith(matrix.os, 'windows')\n    with:\n      name: ${{ format('win-installer-{0}', github.event.inputs.setting) }}\n      path: dist/installers/${{ matrix.variant }}-${{ steps.package_info.outputs.package_version }}-setup.exe\n  - name: upload mac-installer\n    uses: actions/upload-artifact@master\n    if: startsWith(matrix.os, 'mac')\n    with:\n      name: ${{ format('mac-installer-{0}', github.event.inputs.setting) }}\n      path: dist/installers/${{ matrix.variant }}-${{ steps.package_info.outputs.package_version }}.dmg\n  - name: upload linux-installer\n    uses: actions/upload-artifact@master\n    if: startsWith(matrix.os, 'ubuntu')\n    with:\n      name: ${{ format('linux-installer-{0}', github.event.inputs.setting) }}\n      path: dist/installers/${{ matrix.variant }}_${{ steps.package_info.outputs.package_version }}_x64.deb\n")),(0,r.kt)("p",null,"Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"# Upload installers to github release")," section in ",(0,r.kt)("inlineCode",{parentName:"p"},"release.yaml")," with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  - name: Upload app to release - windows\n    if: startsWith(matrix.os, 'windows')\n    uses: svenstaro/upload-release-action@v2\n    with:\n      repo_token: ${{ secrets.GITHUB_TOKEN }}\n      file: dist/installers/${{ matrix.variant }}-${{ steps.package_info.outputs.package_version }}-setup.exe\n      asset_name: ${{ matrix.variant }}-${{ steps.package_info.outputs.package_version }}-${{ matrix.setting }}-setup.exe\n      tag: ${{ github.ref }}\n  - name: Upload app to release - linux\n    if: startsWith(matrix.os, 'ubuntu')\n    uses: svenstaro/upload-release-action@v2\n    with:\n      repo_token: ${{ secrets.GITHUB_TOKEN }}\n      file: dist/installers/${{ matrix.variant }}_${{ steps.package_info.outputs.package_version }}_x64.deb\n      asset_name: ${{ matrix.variant }}_${{ steps.package_info.outputs.package_version }}_${{ matrix.setting }}_x64.deb\n      tag: ${{ github.ref }}\n  - name: Upload app to release - mac\n    if: startsWith(matrix.os, 'mac')\n    uses: svenstaro/upload-release-action@v2\n    with:\n      repo_token: ${{ secrets.GITHUB_TOKEN }}\n      file: dist/installers/${{ matrix.variant }}-${{ steps.package_info.outputs.package_version }}.dmg\n      asset_name: ${{ matrix.variant }}-${{ steps.package_info.outputs.package_version }}-${{ matrix.setting }}.dmg\n      tag: ${{ github.ref }}\n")))}m.isMDXComponent=!0}}]);