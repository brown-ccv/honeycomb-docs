"use strict";(self.webpackChunkhoneycomb_docs=self.webpackChunkhoneycomb_docs||[]).push([[608],{9365:(e,t,a)=>{a.d(t,{A:()=>l});var n=a(6540),r=a(53);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:a},t)}},1470:(e,t,a)=>{a.d(t,{A:()=>w});var n=a(8168),r=a(6540),i=a(53),l=a(3104),o=a(6347),s=a(7485),m=a(1682),p=a(9466);function g(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??g(a);return function(e){const t=(0,m.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=c(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,m]=d({queryString:a,groupId:n}),[g,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,p.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),h=(()=>{const e=s??g;return u({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),y(e)}),[m,y,i]),tabValues:i}}var h=a(2303);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:m}=e;const p=[],{blockElementScrollPositionUntilNextRender:g}=(0,l.a_)(),c=e=>{const t=e.currentTarget,a=p.indexOf(t),n=m[a].value;n!==o&&(g(t),s(n))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},t)},m.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:c},l,{className:(0,i.A)("tabs__item",N.tabItem,l?.className,{"tabs__item--active":o===t})}),a??t)})))}function b(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=y(e);return r.createElement("div",{className:(0,i.A)("tabs-container",N.tabList)},r.createElement(f,(0,n.A)({},e,t)),r.createElement(b,(0,n.A)({},e,t)))}function w(e){const t=(0,h.A)();return r.createElement(k,(0,n.A)({key:String(t)},e))}},102:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>k,frontMatter:()=>u,metadata:()=>y,toc:()=>N});var n=a(8168),r=(a(6540),a(5680)),i=a(2355),l=a(9365),o=a(1470);const s=a.p+"assets/images/clone-code-button-e90c329a7e167ff0f79391cd79af8cc1.webp",m=a.p+"assets/images/template_0-a1b5129c7526d910bfd8ca1b78464793.png",p=a.p+"assets/images/template_1-e2b5ed212b0dc62bd3a18b45337a1872.png",g=a.p+"assets/images/workflow-permissions-e7b2dd2b9b729493bc61a15033a45d45.png",c=a.p+"assets/images/powershell_admin-33d18a547790e540d5630c7626b766c6.png",u={id:"quick_start",slug:"/quick_start",title:"Quick Start",description:"Quick start guide for Honeycomb"},d=void 0,y={unversionedId:"quick_start",id:"quick_start",title:"Quick Start",description:"Quick start guide for Honeycomb",source:"@site/docs/quick_start.mdx",sourceDirName:".",slug:"/quick_start",permalink:"/honeycomb-docs/docs/quick_start",draft:!1,editUrl:"https://github.com/brown-ccv/honeycomb-docs/edit/main/docs/quick_start.mdx",tags:[],version:"current",lastUpdatedAt:1715090738,formattedLastUpdatedAt:"May 7, 2024",frontMatter:{id:"quick_start",slug:"/quick_start",title:"Quick Start",description:"Quick start guide for Honeycomb"},sidebar:"mySidebar",previous:{title:"Introduction",permalink:"/honeycomb-docs/docs/"},next:{title:"Prerequisites",permalink:"/honeycomb-docs/docs/prerequisites"}},h={},N=[{value:"Creating Your Task Repository",id:"creating-your-task-repository",level:2},{value:"Cloning the Repository",id:"cloning-the-repository",level:2},{value:"Installing Prerequisites",id:"installing-prerequisites",level:2},{value:"Initial Install",id:"initial-install",level:3},{value:"Setting Up Node",id:"setting-up-node",level:3},{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"Run the Task",id:"run-the-task",level:2},{value:"Edit the Task",id:"edit-the-task",level:2},{value:"1) Edit the Project Metadata",id:"1-edit-the-project-metadata",level:3},{value:"2) Add a file for the task",id:"2-add-a-file-for-the-task",level:3},{value:"3) Add some trials to the task",id:"3-add-some-trials-to-the-task",level:3},{value:"Next Steps",id:"next-steps",level:2}],f={toc:N},b="wrapper";function k(e){let{components:t,...a}=e;return(0,r.yg)(b,(0,n.A)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"creating-your-task-repository"},"Creating Your Task Repository"),(0,r.yg)("p",null,"The Honeycomb repository is a template and serves as the starting point for all tasks. Creating your repository from the template starts your project with the same directory structure and files as an existing repository."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Go to the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/brown-ccv/honeycomb"},"Honeycomb repository"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Click on ",(0,r.yg)("inlineCode",{parentName:"p"},"Use this template")," and select ",(0,r.yg)("inlineCode",{parentName:"p"},"Create a new repository"),"."),(0,r.yg)("img",{src:m,alt:"Use this template"})),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Enter the owner, name, and description of your repository and click on ",(0,r.yg)("inlineCode",{parentName:"p"},"Create repository from template"),"."),(0,r.yg)("img",{src:p,alt:"Create the repository"}),(0,r.yg)("admonition",{parentName:"li",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"We recommend creating a public repository and leaving ",(0,r.yg)("inlineCode",{parentName:"p"},"Include all branches")," unchecked"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},'Ensure the repository\'s workflow permissions are set to "Read and write permissions"'),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("em",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"em"},"Settings -> Actions -> General -> Workflow permissions"))),(0,r.yg)("img",{src:g,alt:"GitHub workflow permissions settings"}))),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Additional details about template repositories can be found on the ",(0,r.yg)("a",{parentName:"em",href:"https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template"},"Github Docs"),".")),(0,r.yg)("h2",{id:"cloning-the-repository"},"Cloning the Repository"),(0,r.yg)("p",null,"With the repository now setup it can be cloned onto your computer."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Navigate to the repository on ",(0,r.yg)("a",{parentName:"p",href:"https://github.com"},"GitHub"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Click the ",(0,r.yg)("inlineCode",{parentName:"p"},"Code")," button and copy the URL"),(0,r.yg)("img",{src:s,alt:"GitHub clone repo button"})),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Open a terminal and navigate to where you want the cloned directory"))),(0,r.yg)(o.A,{groupId:"os",queryString:!0,defaultValue:"mac",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"win",label:"Windows",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Powershell"',title:'"Powershell"'},"cd 'path/to/directory'\n"))),(0,r.yg)(l.A,{value:"mac",label:"macOS",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Terminal.app"',title:'"Terminal.app"'},"cd 'path/to/directory'\n")))),(0,r.yg)("ol",{start:4},(0,r.yg)("li",{parentName:"ol"},"Clone the repo with the following command")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:"title='Paste the URL you copied earlier'",title:"'Paste",the:!0,URL:!0,you:!0,copied:!0,"earlier'":!0}," git clone https://github.com/<YOUR-USERNAME>/<YOUR-REPOSITORY>\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Git can be downloaded ",(0,r.yg)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"},"here")," if it is not already on your system.")),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Additional details and alternative methods for cloning a repository can be found on the ",(0,r.yg)("a",{parentName:"em",href:"https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository?tool=webui"},"Github Docs"),".")),(0,r.yg)("h2",{id:"installing-prerequisites"},"Installing Prerequisites"),(0,r.yg)("p",null,"All of the needed programs for Honeycomb must be installed before we can develop our task. We will use a ",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Package_manager"},"package manager")," to automatically install them."),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"prerequisites"},"Prerequisites")," for more information about these programs."),(0,r.yg)("h3",{id:"initial-install"},"Initial Install"),(0,r.yg)(o.A,{groupId:"os",queryString:!0,defaultValue:"mac",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"win",label:"Windows",mdxType:"TabItem"},(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Run Powershell as an admin from the start menu"),(0,r.yg)("img",{src:c,alt:"Powershell admin launcher"})),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Navigate to the root directory of your cloned repository")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Paste the following command and follow the prompts to install the listed programs:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"./winget.ps1\n"))))),(0,r.yg)(l.A,{value:"mac",label:"macOS",mdxType:"TabItem"},(0,r.yg)("p",null,"The most commonly used package manager on macOS is ",(0,r.yg)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew"),"."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Paste the following command in a macOS Terminal and follow the prompts to install Homebrew."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Paste the following command and follow the prompts to install the listed programs:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"brew bundle\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install Xcode (not available on Homebrew)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"xcode-select --install\n")))))),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"If you are running into issues after installing the packages, please restart your terminal and/or reboot your computer. This should resolve most issues.")),(0,r.yg)("h3",{id:"setting-up-node"},"Setting Up Node"),(0,r.yg)("p",null,"NVM (Node Version Manager) is a tool for installing and using multiple versions on Node on your computer. It must first be installed:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install NVM"),(0,r.yg)(o.A,{groupId:"os",queryString:!0,defaultValue:"mac",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"win",label:"Windows",mdxType:"TabItem"},(0,r.yg)("em",null,"The previous step installs"," ",(0,r.yg)("a",{href:"https://github.com/coreybutler/nvm-windows"},"NVM for Windows")," via the winget package manager. Note that this is a different tool than NVM with slight differences needed for compatibility with Windows.")),(0,r.yg)(l.A,{value:"mac",label:"macOS",mdxType:"TabItem"},(0,r.yg)(i.A,{language:"sh",mdxType:"CodeBlock"},"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash")))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Copy the version number listed in ",(0,r.yg)("inlineCode",{parentName:"p"},".nvmrc"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install that version."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"nvm install <VERSION>\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Use the needed version."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"nvm use <VERSION>\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Set the current version as your default"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"nvm alias default node\n")),(0,r.yg)("admonition",{parentName:"li",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"You can skip this step if you've already set a default node version in a different project.")))),(0,r.yg)("h2",{id:"install-dependencies"},"Install Dependencies"),(0,r.yg)("p",null,"There are many Node packages used by Honeycomb that also need to be installed. Node comes with its own package manager to install, update, and maintain these dependencies throughout the development lifecycle."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install Honeycomb\'s dependencies"',title:'"Install',"Honeycomb's":!0,'dependencies"':!0},"npm install\n")),(0,r.yg)("p",null,"Certain Node dependencies are best installed globally. These tools will be available from the command line anywhere on your system."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install Honeycomb\'s global dependencies"',title:'"Install',"Honeycomb's":!0,global:!0,'dependencies"':!0},"npm install -g electron firebase-tools dotenv-cli electron lint-staged\n")),(0,r.yg)("h2",{id:"run-the-task"},"Run the Task"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Run the task in development mode"',title:'"Run',the:!0,task:!0,in:!0,development:!0,'mode"':!0},"npm run dev\n")),(0,r.yg)("p",null,'Running the task in development mode enables "hot reloading": changes to the code will immediately be reflected in the app without needing to restart the server.'),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The dev script runs Honeycomb on Electron without any environment variables. Check out the ",(0,r.yg)("a",{parentName:"p",href:"npm_scripts#dev"},"NPM Scripts")," page for more information on the available development environments.")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},'Honeycomb ships with a modified version of the "simple reaction time task" from the ',(0,r.yg)("a",{parentName:"p",href:"https://www.jspsych.org/7.3/tutorials/rt-task/"},"jsPsych tutorial"),". In the next section we'll create a new task and tell Honeycomb to run it!")),(0,r.yg)("h2",{id:"edit-the-task"},"Edit the Task"),(0,r.yg)("p",null,"Now that the project is up and running we can make our first changes to the code!"),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"The quick start guide details a ",(0,r.yg)("a",{parentName:"p",href:"version_control#git-commands"},"command line")," workflow for version control. If you are unfamiliar with Git, we recommend reading the linked page before proceeding.")),(0,r.yg)("h3",{id:"1-edit-the-project-metadata"},"1) Edit the Project Metadata"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a new branch in a separate terminal"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Create the branch edit-package-json"',title:'"Create',the:!0,branch:!0,'edit-package-json"':!0},"git checkout -b edit-package-json\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Open ",(0,r.yg)("inlineCode",{parentName:"p"},"package.json")," and edit it to reflect your app:"),(0,r.yg)("ol",{parentName:"li"},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"name")," is your task's name, generally this is the name of our repository"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"description")," should be rewritten to better match your task"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"author")," is your lab (or PIs) name, email, and website"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"honeycombVersion")," is the number currently in the ",(0,r.yg)("inlineCode",{parentName:"li"},"version")," field"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"version")," should then be reset to 1.0.0"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"repository")," is the link the GitHub repository you created ",(0,r.yg)("a",{parentName:"li",href:"#2-start-your-new-task-from-our-template-repository"},"earlier"),".")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n   "name": "my-task",\n   "description": "A custom task for the Honeycomb platform",\n   "author": {\n     "name": "My Lab",\n     "email": "example@domain.com",\n     "url": "https://lab-web-page.com"\n   },\n   "honeycombVersion": "3.3.0", // Match what was in version!\n   // highlight-delete-next-line\n   "version": "3.3.0",\n   "version": "1.0.0",\n   "repository": "https://github.com/my-username/my-repository"\n},\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "edit package.json with my task\'s information"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create and merge a ",(0,r.yg)("a",{parentName:"p",href:"version_control#create-a-pull-request"},"pull request")," to merge your changes into the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," branch. Make sure the builds complete successfully before merging!"))),(0,r.yg)("h3",{id:"2-add-a-file-for-the-task"},"2) Add a file for the task"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Bring your branch up to date with the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," branch"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Switch to the main branch"',title:'"Switch',to:!0,the:!0,main:!0,'branch"':!0},"git checkout main\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Bring changes from GitHub into your local repository"',title:'"Bring',changes:!0,from:!0,GitHub:!0,into:!0,your:!0,local:!0,'repository"':!0},"git pull\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a new branch (replace ",(0,r.yg)("inlineCode",{parentName:"p"},"task-name")," with the name of your task)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Check out a new branch"',title:'"Check',out:!0,a:!0,new:!0,'branch"':!0},"git checkout -b add-<task-name>-file\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add a new file inside ",(0,r.yg)("inlineCode",{parentName:"p"},"src/experiment/")," with the same name as your task")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Add the new file to Git"',title:'"Add',the:!0,new:!0,file:!0,to:!0,'Git"':!0},"git add .\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "feat: adds file for the <task name> task"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add a ",(0,r.yg)("inlineCode",{parentName:"p"},"taskNameOptions")," object to the new file (replace ",(0,r.yg)("inlineCode",{parentName:"p"},"taskName")," with the name of your task)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="taskName.js"',title:'"taskName.js"'},'/**\n * Experiment-wide settings for jsPsych: https://www.jspsych.org/7.3/overview/experiment-options/\n * Note that Honeycomb combines these with other options required for Honeycomb to operate correctly\n */\nexport const taskNameOptions = {\n  // Called when every trial finishes\n  on_trial_finish: function (data) {\n    console.log(`Trial ${data.internal_node_id} just finished:`, data);\n  },\n  // Called when the experiment finishes\n  on_finish: function (data) {\n    console.log("The experiment has finished:", data);\n    // Reload the page for another run-through of the experiment\n    window.location.reload();\n  },\n};\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add a ",(0,r.yg)("inlineCode",{parentName:"p"},"buildTaskNameFunction")," to the new file (replace ",(0,r.yg)("inlineCode",{parentName:"p"},"TaskName")," with the name of your task)"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="taskName.js"',title:'"taskName.js"'},"/**\n * This timeline builds the example reaction time task from the jsPsych tutorial.\n * Take a look at how the code here compares to the jsPsych documentation!\n * See the jsPsych documentation for more: https://www.jspsych.org/7.3/tutorials/rt-task/\n *\n * @param {Object} jsPsych The jsPsych instance being used to run the task\n * @returns {Object} A jsPsych timeline object\n */\nexport function buildTaskNameTimeline(jsPsych) {}\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "feat: adds taskNameOptions and buildTaskNameTimeline to taskName.js"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit ",(0,r.yg)("inlineCode",{parentName:"p"},"src/experiment/index.js")," to use the new file"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/experiment/index.js"',title:'"src/experiment/index.js"'},'// highlight-delete-next-line\nimport { buildHoneycombTimeline, honeycombOptions } from "./honeycomb";\nimport { buildTaskNameTimeline, taskNameOptions } from "./taskName";\n\n// ...\n\n// highlight-delete-next-line\nexport const jsPsychOptions = honeycombOptions;\nexport const jsPsychOptions = taskNameOptions;\n\n// ...\n\nexport function buildTimeline(jsPsych, studyID, participantID) {\n  console.log(`Building timeline for participant ${participantID} on study ${studyID}`);\n\n  // highlight-delete-next-line\n  const timeline = buildHoneycombTimeline(jsPsych);\n  const timeline = buildTaskNameTimeline(jsPsych);\n  return timeline;\n}\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Run the format script to make sure the code is formatted correctly"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"npm run format\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "fix: Use new task\'s file"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create and merge a ",(0,r.yg)("a",{parentName:"p",href:"version_control#create-a-pull-request"},"pull request")," to merge your changes into the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," branch. Make sure the builds complete successfully before merging!"))),(0,r.yg)("h3",{id:"3-add-some-trials-to-the-task"},"3) Add some trials to the task"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Bring your branch up to date with the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," branch"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Switch to the main branch"',title:'"Switch',to:!0,the:!0,main:!0,'branch"':!0},"git checkout main\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Bring changes from GitHub into your local repository"',title:'"Bring',changes:!0,from:!0,GitHub:!0,into:!0,your:!0,local:!0,'repository"':!0},"git pull\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a new branch"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Bring changes from GitHub into your local repository"',title:'"Bring',changes:!0,from:!0,GitHub:!0,into:!0,your:!0,local:!0,'repository"':!0},"git checkout -b add-start-procedure\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add the start procedure to the ",(0,r.yg)("inlineCode",{parentName:"p"},"buildTaskNameTimeline")," function in the file you created earlier"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="taskName.js"',title:'"taskName.js"'},'import { buildStartProcedure } from "./procedures/startProcedure";\n\n// ...\n\nexport function buildTaskNameTimeline(jsPsych) {\n  // Build the trials that make up the start procedure\n  const startProcedure = buildStartProcedure(jsPsych);\n\n  const timeline = [startProcedure];\n  return timeline;\n}\n\n// ...\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "feat: adds startProcedure to the task"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit the text for the task's name"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="src/config/language.json"',title:'"src/config/language.json"'},'{\n  "name": "taskName"\n  // ...\n}\n')),(0,r.yg)("admonition",{parentName:"li",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The text for the introduction trial is in ",(0,r.yg)("inlineCode",{parentName:"p"},"src/config/language.json")," under the ",(0,r.yg)("inlineCode",{parentName:"p"},"trials")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"introduction")," key."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="src/config/language.json"',title:'"src/config/language.json"'},' {\n   "name": "taskName"\n   // ...\n   "trials": {\n     "introduction": "Welcome to the experiment. Press any key to begin."\n     // ...\n   },\n   // ...\n }\n')))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "feat: Updates the language for the startProcedure of the task"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add the end procedure to the ",(0,r.yg)("inlineCode",{parentName:"p"},"buildTaskNameTimeline")," function in the file you created earlier"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="taskName.js"',title:'"taskName.js"'},'import { buildStartProcedure } from "./procedures/startProcedure";\nimport { buildEndProcedure } from "./procedures/endProcedure";\n\n// ...\n\nexport function buildTaskNameTimeline(jsPsych) {\n  // Build the trials that make up the start procedure\n  const startProcedure = buildStartProcedure(jsPsych);\n\n  // Builds the trials that make up the end procedure\n  const endProcedure = buildEndProcedure(jsPsych);\n\n  const timeline = [startProcedure, endProcedure];\n  return timeline;\n}\n// ...\n')),(0,r.yg)("admonition",{parentName:"li",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The text for the conclusion trial is in ",(0,r.yg)("inlineCode",{parentName:"p"},"src/config/language.json")," under the ",(0,r.yg)("inlineCode",{parentName:"p"},"trials")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"conclusion")," key."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="src/config/language.json"',title:'"src/config/language.json"'},' {\n   "name": "taskName"\n   // ...\n   "trials": {\n     // ...\n     "conclusion": "Welcome to the experiment. Press any key to begin."\n   },\n }\n')))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Run a format to make sure the code is formatted correctly"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"npm run format\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Save your changes and commit them to git:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="Commit all changed files with a custom message"',title:'"Commit',all:!0,changed:!0,files:!0,with:!0,a:!0,custom:!0,'message"':!0},'git commit -a -m "feat: adds endProcedure to the task"\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create and merge a ",(0,r.yg)("a",{parentName:"p",href:"version_control#create-a-pull-request"},"pull request")," to merge your changes into the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," branch. Make sure the builds complete successfully before merging!"))),(0,r.yg)("h2",{id:"next-steps"},"Next Steps"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("a",{parentName:"li",href:"firebase"},"Firebase")," page explains how to set up your task with Firebase."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("a",{parentName:"li",href:"environment_variables"},"Environment Variables")," page explains how to configure your task for deployment to multiple scenarios."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("a",{parentName:"li",href:"npm_scripts"},"NPM Scripts")," page lists every script you can run and which environment they use.")))}k.isMDXComponent=!0}}]);