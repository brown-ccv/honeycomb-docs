"use strict";(self.webpackChunkhoneycomb=self.webpackChunkhoneycomb||[]).push([[4350],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var i=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,y=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return t?i.createElement(y,l(l({ref:n},p),{},{components:t})):i.createElement(y,l({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var d=2;d<o;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9654:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(8168),a=(t(6540),t(5680));const o={id:"directory_structure",slug:"/directory_structure",title:"Directory Structure",description:"Overview of Honeycomb's directory structure"},l=void 0,r={unversionedId:"project_organization/directory_structure",id:"version-3.2.x/project_organization/directory_structure",title:"Directory Structure",description:"Overview of Honeycomb's directory structure",source:"@site/versioned_docs/version-3.2.x/project_organization/directory_structure.mdx",sourceDirName:"project_organization",slug:"/directory_structure",permalink:"/honeycomb-docs/docs/3.2.x/directory_structure",draft:!1,editUrl:"https://github.com/brown-ccv/honeycomb-docs/edit/main/versioned_docs/version-3.2.x/project_organization/directory_structure.mdx",tags:[],version:"3.2.x",lastUpdatedAt:1711378169,formattedLastUpdatedAt:"Mar 25, 2024",frontMatter:{id:"directory_structure",slug:"/directory_structure",title:"Directory Structure",description:"Overview of Honeycomb's directory structure"},sidebar:"mySidebar",previous:{title:"Prerequisites",permalink:"/honeycomb-docs/docs/3.2.x/prerequisites"},next:{title:"NPM Scripts",permalink:"/honeycomb-docs/docs/3.2.x/npm_scripts"}},s={},d=[{value:"assets/",id:"assets",level:2},{value:"build/",id:"build",level:2},{value:"emulator_data/",id:"emulator_data",level:2},{value:"env/",id:"env",level:2},{value:"node_modules/",id:"node_modules",level:2},{value:"psiturkit/",id:"psiturkit",level:2},{value:"public/",id:"public",level:2},{value:"assets/",id:"assets-1",level:3},{value:"lib/",id:"lib",level:3},{value:"config/",id:"config",level:3},{value:"src/",id:"src",level:2},{value:"App/",id:"app",level:3},{value:"components/",id:"components",level:4},{value:"deployments/",id:"deployments",level:4},{value:"config/",id:"config-1",level:3},{value:"lib/",id:"lib-1",level:3},{value:"markup/",id:"markup",level:4},{value:"utils.js",id:"utilsjs",level:4},{value:"timelines/",id:"timelines",level:3},{value:"trials/",id:"trials",level:3},{value:"index.js",id:"indexjs",level:3},{value:"Other Folders/Files",id:"other-foldersfiles",level:2},{value:"Firebase Files",id:"firebase-files",level:3},{value:"Git Files",id:"git-files",level:3},{value:"Eslint Files",id:"eslint-files",level:3},{value:"Prettier Files",id:"prettier-files",level:3}],p={toc:d},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This project directory is organized to be very modular and composable. In general, files and functions should be relatively small and self-contained, global scope should not be used and only the pieces of code needed for any given file should be imported. This keeps the code maintainable with clear lineage and purpose for each piece of code."),(0,a.yg)("h2",{id:"assets"},"assets/"),(0,a.yg)("p",null,"This folder contains any static files that are used by the app. Honeycomb starts with a few images used as icons for the installed applications."),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Assets that pertain to your specific task should be added to the ",(0,a.yg)("a",{parentName:"p",href:"#assets-1"},"public/assets/")," folder, not here!")),(0,a.yg)("h2",{id:"build"},"build/"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"npm_scripts#npm-build"},"build scripts")," automatically create a ",(0,a.yg)("inlineCode",{parentName:"p"},"build")," folder at the root of the repository and update it on subsequent builds. ",(0,a.yg)("inlineCode",{parentName:"p"},"build/")," should be left alone!"),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},"The build folder is in Honeycomb's ",(0,a.yg)("inlineCode",{parentName:"p"},".gitignore")," and should never be added to git")),(0,a.yg)("h2",{id:"emulator_data"},"emulator_data/"),(0,a.yg)("p",null,"This folder contains starter data for the Firebase Emulators to use while developing locally. See the ",(0,a.yg)("a",{parentName:"p",href:"npm_scripts#firebase"},"Firebase Scripts")," to use the data."),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},"emulator_data/")," is written to when running ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run firebase:emulators:save")," and should never be manually edited.")),(0,a.yg)("h2",{id:"env"},"env/"),(0,a.yg)("p",null,"This folder contains different files used to pass environment variables (settings) into Honeycomb. Honeycomb starts with presets for common use cases and is explained in greater detail in the ",(0,a.yg)("a",{parentName:"p",href:"environment_variables"},"Environment Variables")," section."),(0,a.yg)("h2",{id:"node_modules"},"node_modules/"),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},"node_modules/")," is written to when running ",(0,a.yg)("inlineCode",{parentName:"p"},"npm install")," and should never be manually edited.")),(0,a.yg)("h2",{id:"psiturkit"},"psiturkit/"),(0,a.yg)("p",null,"The file ",(0,a.yg)("inlineCode",{parentName:"p"},"psiturk-it")," inside ",(0,a.yg)("inlineCode",{parentName:"p"},"psiturkit/")," is a bash script used to instal PsiTurk locally - see ",(0,a.yg)("a",{parentName:"p",href:"psiturk#build-instructions"},"PsiTurk")," for more information."),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Nothing in this folder should ever need to be manually edited.")),(0,a.yg)("h2",{id:"public"},"public/"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"public")," directory contains files that are used as assets in the built app."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"index.html")," is the entry point of the website",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Changing ",(0,a.yg)("inlineCode",{parentName:"li"},"<title>Honeycomb</title>")," will update the name you can see in the browser tab."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"favicon.ico")," is the small icon you can see in the browser tab."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"electron.js")," contains all of the code related to the electron app.")),(0,a.yg)("h3",{id:"assets-1"},"assets/"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"public/assets/")," directory contains all of the images and videos needed to run your task."),(0,a.yg)("h3",{id:"lib"},"lib/"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"public/lib/")," directory contains the files PsiTurk needs to run. Note that ",(0,a.yg)("inlineCode",{parentName:"p"},"index.html")," references these files inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"<script>")," tags."),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},"These files are minified versions of dependencies and should never be manually edited.")),(0,a.yg)("h3",{id:"config"},"config/"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"public/config/")," directory contains the config files needed for the electron app. This includes the event-marker details and event codes. ",(0,a.yg)("inlineCode",{parentName:"p"},"version.json")," keeps track of the current git commit, which Honeycomb uses to keep track of the version of your task used for a given experiment."),(0,a.yg)("h2",{id:"src"},"src/"),(0,a.yg)("p",null,"This folder contains the source code for the Honeycomb application."),(0,a.yg)("h3",{id:"app"},"App/"),(0,a.yg)("p",null,"Files relating to the React application. This is the code that runs your JsPsych task and shouldn't need to be changed."),(0,a.yg)("h4",{id:"components"},"components/"),(0,a.yg)("p",null,"The React components that make up Honeycomb are located here."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"App.jsx")," initializes and maintains the state of the application. It is also where communication is set up between the ",(0,a.yg)("inlineCode",{parentName:"li"},"electron")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"psiturk")," processes."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Error.jsx")," displays a small error message. It is rendered when the App.jsx detects an issue in state."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"JsPsychExperiment.jsx")," initializes the JsPsych experiment"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Login.jsx")," handles user authentication based on the environment variables passed to Honeycomb")),(0,a.yg)("h4",{id:"deployments"},"deployments/"),(0,a.yg)("p",null,"Custom code used by the various deployments such as Firebase."),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Changes to these files will change how Honeycomb handles data and should be done with great caution.")),(0,a.yg)("h3",{id:"config-1"},"config/"),(0,a.yg)("p",null,"Each file in the config directory contains settings for a different part of the task."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"main.js")," contains the global settings (e.g. whether Honeycomb is running online or in the clinic) passed from env variables and logic for loading the appropriate language file."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"trigger.js")," for equipment-related settings (e.g. event markers). It uses a slightly different style of javascript as it is imported both in the React app as well as the electron process."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"config.json")," contains the settings for your task. Usage of the config file allows for easy updating of task settings. Common settings can be written once in the config file and re-used throughout the task."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"language.json")," contains the language used in your task. Usage of language json files allows for easy internationalization of the task (e.g. english and spanish) and mturk-specific language. Common phrases can be written once in a language file and re-used throughout the task.")),(0,a.yg)("h3",{id:"lib-1"},"lib/"),(0,a.yg)("p",null,"A library of utility and markup are located here. This allows for functions and html to be re-used wherever needed."),(0,a.yg)("h4",{id:"markup"},"markup/"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"src/lib/markup/")," files contain HTML templates used throughout the task."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"stimuli.js")," contains a ",(0,a.yg)("inlineCode",{parentName:"li"},"baseStimulus")," function that wraps some markup in a container that takes up 100% of the height and width of the viewport"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"photodiode.js")," contains the markup for the photodiode box and spot. It is displayed in the bottom right corner of the scree."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tags.js")," contains functions for wrapping ",(0,a.yg)("a",{parentName:"li",href:"#config-1"},"language")," in common html tags.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"p('Hello World')")," will return ",(0,a.yg)("inlineCode",{parentName:"li"},"<p>Hello World</p>"),". You should always wrap your language in a tag to ensure it is displayed correctly.")))),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tag")," function inside ",(0,a.yg)("inlineCode",{parentName:"p"},"tags.js")," can be used to wrap language in any html tag you need.")),(0,a.yg)("h4",{id:"utilsjs"},"utils.js"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"utils.js")," contains utility functions that can be used across a variety of trials. Be sure to look for functions you might be able to use in your task!"),(0,a.yg)("h3",{id:"timelines"},"timelines/"),(0,a.yg)("p",null,"A timeline is a collection of trials that JsPsych displays in the given order. Timelines can contain timelines themselves; you may want to break this nesting into multiple files in this folder."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"main.js")," contains the JsPsych options and root timeline which ",(0,a.yg)("inlineCode",{parentName:"li"},"App.jsx")," uses to run the experiment."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"honeycombBlock.js"),' contains the timeline for the Honeycomb block - the "meat" the example reaction-time task. It uses the task settings from ',(0,a.yg)("a",{parentName:"li",href:"#config-1"},"config.json"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"honeycombTimeline.js")," contains the timeline for the entire Honeycomb task. This includes the block timeline from ",(0,a.yg)("inlineCode",{parentName:"li"},"honeycombBlock.js"),", as well as individual trials such as the welcome screen, full screen trial, and instructions."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"preamble.js")," contains a base timeline for showing the name and welcome screen of an experiment, as well as automatically entering fullscreen mode. It adds the photodiode instructions to the timeline if Honeycomb is using the photodiode.")),(0,a.yg)("h3",{id:"trials"},"trials/"),(0,a.yg)("p",null,"A trial is the base unit of a JsPsych experiment. Each trial should be its own file within this folder - the files in ",(0,a.yg)("a",{parentName:"p",href:"#timelines"},"src/timelines/")," will combine these trials into the full experiment."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"honeycombTrials.js")," contains the individual trials used in the Honeycomb task. These trials are imported into ",(0,a.yg)("inlineCode",{parentName:"li"},"honeycombBlock.js")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"honeycombTimeline.js"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"adjustVolume.js")," prompts the user to adjust the volume on their computer."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"camera.js")," contains trials for beginning and ending a camera recording."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"fullscreen.js")," contains trials for entering and exiting fullscreen mode."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"holdUpMarker.js")," prompts the user to connect their event marker and hold it up to the camera."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"quizTrial.js")," contains trials for a quiz/survey."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"startCode.js")," emits a start code to a photodiode spot and audible beep")),(0,a.yg)("h3",{id:"indexjs"},"index.js"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"index.js")," is the entry point for React in our application. Note that the id 'root' corresponds with a tag in ",(0,a.yg)("inlineCode",{parentName:"p"},"public/index.html"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<div id="root"></div>\n')),(0,a.yg)("h2",{id:"other-foldersfiles"},"Other Folders/Files"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".nvmrc")," determines which version of node that Honeycomb is designed to be run on"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".github/workflows/")," contains .yaml files used to build Honeycomb on a pull request (",(0,a.yg)("inlineCode",{parentName:"li"},"build.yaml"),") and create task executables either in a single instance (",(0,a.yg)("inlineCode",{parentName:"li"},"package.yaml"),") or for a full release (",(0,a.yg)("inlineCode",{parentName:"li"},"release.yaml"),")"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"package.json")," contains metadata about your project, a list of the dependencies needed for the project, and scripts to run tasks related to your task. The ",(0,a.yg)("a",{parentName:"li",href:"quick_start#4-change-name-and-description"},"Quick Start")," lists which metadata should be changed."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"cli.mjs")," is the script used to download and delete data stored in Firestore."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"version.js")," is the script used to keep track of which version of the task a given experiment is using")),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},"package-lock.json")," is written to when running ",(0,a.yg)("inlineCode",{parentName:"p"},"npm install")," and should never be manually edited.")),(0,a.yg)("h3",{id:"firebase-files"},"Firebase Files"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".firebaserc")," contains the name of the project Firebase should connect to. Be sure to update the default project to the one you created!"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"firebase.json")," contains the Firebase settings for Honeycomb."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"firestore.indexes.json")," contains the Firestore index settings for Honeycomb."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"firestore.rules")," contains the Firestore rules for creating/editing data.")),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},"firebase.json"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"firestore.indexes.json"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"firestore.rules")," shouldn't need to be manually edited.")),(0,a.yg)("h3",{id:"git-files"},"Git Files"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".gitignore")," lists the folders and files that should be excluded from Git.")),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},"Any secrets and/or tokens must be added to ",(0,a.yg)("inlineCode",{parentName:"p"},".gitignore")," or they will be visible to anyone with access to the repository!")),(0,a.yg)("h3",{id:"eslint-files"},"Eslint Files"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".eslintrc.js")," contains the Eslint settings for Honeycomb. We recommend it's left alone but can be adjusted for personal settings."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".eslintignore")," lists the folders and files that eslint shouldn't touch, similar to ",(0,a.yg)("inlineCode",{parentName:"li"},".gitignore"),".")),(0,a.yg)("h3",{id:"prettier-files"},"Prettier Files"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},".prettierrc.js")," contains the Prettier settings for Honeycomb. We recommend it's left alone but can be adjusted for personal settings."))}c.isMDXComponent=!0}}]);