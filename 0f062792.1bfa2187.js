(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=u(n),d=i,h=b["".concat(o,".").concat(d)]||b[d]||p[d]||a;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var i=n(3),r=n(7),a=(n(0),n(101)),o={id:"online_integration",title:"Deploy online"},l={unversionedId:"online_integration",id:"online_integration",isDocsHomePage:!1,title:"Deploy online",description:"Usage with PsiTurk",source:"@site/docs/online_integtration.md",slug:"/online_integration",permalink:"/honeycomb-docs/docs/online_integration",editUrl:"https://github.com/brown-ccv/honeycomb-docs/edit/main/docs/online_integtration.md",version:"current",lastUpdatedAt:1624304120,sidebar:"someSidebar",previous:{title:"Set up event triggers",permalink:"/honeycomb-docs/docs/event_triggers"},next:{title:"Troubleshooting",permalink:"/honeycomb-docs/docs/troubleshooting"}},s=[{value:"Usage with PsiTurk",id:"usage-with-psiturk",children:[{value:"Prebuilt version",id:"prebuilt-version",children:[]},{value:"Build instructions",id:"build-instructions",children:[]},{value:"Running psiturk",id:"running-psiturk",children:[]}]},{value:"Running on the Web",id:"running-on-the-web",children:[{value:"Using Github Pages",id:"using-github-pages",children:[]},{value:"Using Firebase",id:"using-firebase",children:[]}]}],c={toc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"usage-with-psiturk"},"Usage with PsiTurk"),Object(a.b)("p",null,"While this set up is optimized for Electron, we added functionality that will make use with PsiTurk easy. The application will detect if it's being used in a Turk environment and will:  "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Save the data to the default PsiTurk SQLite database.  "),Object(a.b)("li",{parentName:"ul"},"Switch the language to Turk specific, if ",Object(a.b)("inlineCode",{parentName:"li"},"src/language/<locale>.mturk.json")," exists.  "),Object(a.b)("li",{parentName:"ul"},"Use the Turk specific timeline if different than the primary timeline.  ")),Object(a.b)("h3",{id:"prebuilt-version"},"Prebuilt version"),Object(a.b)("p",null,"When GitHub Actions is run, a psiturk build will be created automatically, and can be downloaded from its artifacts (skip next step if using). The workflows responsible for building the PsiTurk application are ",Object(a.b)("inlineCode",{parentName:"p"},".github/workflows/package-home-all.yml")," and ",Object(a.b)("inlineCode",{parentName:"p"},".github/workflows/release-home-all.yml"),". The first one has to be triggered manually, the latter is triggered when you tag a release."),Object(a.b)("h3",{id:"build-instructions"},"Build instructions"),Object(a.b)("p",null,"To set up your PsiTurk project, we provide a script that does the conversion.\nPsiTurk is a Python package used to manage HITs in Mechanical Turk. Before using the provided script, install ",Object(a.b)("a",{parentName:"p",href:"https://psiturk.org/"},"PsiTurk"),"."),Object(a.b)("p",null,"You'll need to follow these steps (the path to the PsiTurk project should be a directory you wish to be created):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Build the application: ",Object(a.b)("inlineCode",{parentName:"p"},"npm run build"),"  ")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Move to the ",Object(a.b)("inlineCode",{parentName:"p"},"psiturkit")," directory: ",Object(a.b)("inlineCode",{parentName:"p"},"cd psiturkit"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"If it's the first time you're running the script:",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"./psiturk-it -p <PATH_TO_NEW_PSITURK_PROJECT>"),"  ")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"To update an existing PsiTurk project (the path to the PsiTurk project should already exist from the previous steps):",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("inlineCode",{parentName:"p"},"./psiturk-it -u -p <PATH_TO_NEW_PSITURK_PROJECT>")))),Object(a.b)("h3",{id:"running-psiturk"},"Running psiturk"),Object(a.b)("p",null,"After that, just navigate to your newly created PsiTurk project directory."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-shell"},"shell> psiturk #start psiturk\npsiturk> server on #start server\npsiturk> debug #debug mode\n")),Object(a.b)("h2",{id:"running-on-the-web"},"Running on the Web"),Object(a.b)("h3",{id:"using-github-pages"},"Using Github Pages"),Object(a.b)("p",null,"Running ",Object(a.b)("inlineCode",{parentName:"p"},"npm run build")," generates static content into the ",Object(a.b)("inlineCode",{parentName:"p"},"build")," directory that can be served using any static contents hosting service. The workflow ",Object(a.b)("inlineCode",{parentName:"p"},".github/workflows/release-home-all.yml")," uploads the build directory to the ",Object(a.b)("inlineCode",{parentName:"p"},"gh-branch")," to serve the application on GitHub pages as an example. After a creating a tag, the workflow will run and your application will be served at ",Object(a.b)("inlineCode",{parentName:"p"},"<githubuser>.github.io/<repository>"),".\nFor this step to succeed you will need to create a deploy key and enable GitHub Pages for your repository."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Generate a new ",Object(a.b)("a",{parentName:"li",href:"https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"},"SSH key"),"."),Object(a.b)("li",{parentName:"ol"},"By default, your public key should have been created in ",Object(a.b)("inlineCode",{parentName:"li"},"~/.ssh/id_rsa.pub")," or use the name you've provided."),Object(a.b)("li",{parentName:"ol"},"Copy key to clipboard with ",Object(a.b)("inlineCode",{parentName:"li"},"xclip -sel clip < ~/.ssh/id_rsa.pub")," and paste it as a ",Object(a.b)("a",{parentName:"li",href:"https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys"},"deploy key")," in your repository. Copy file content if the command line doesn't work for you. Check the box for ",Object(a.b)("inlineCode",{parentName:"li"},"Allow write access")," before saving your deployment key."),Object(a.b)("li",{parentName:"ol"},"You'll need your private key as a ",Object(a.b)("a",{parentName:"li",href:"https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets"},"GitHub secret")," to allow the workflow to run the deployment for you."),Object(a.b)("li",{parentName:"ol"},"To create the secret copy your private key e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"xclip -sel clip < ~/.ssh/id_rsa")," and paste a GitHub secret with name ",Object(a.b)("inlineCode",{parentName:"li"},"GH_PAGES_DEPLOY"),". Copy file content if the command line doesn't work for you. Save your secret."),Object(a.b)("li",{parentName:"ol"},"Make sure the ",Object(a.b)("a",{parentName:"li",href:"https://help.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"},"publishing source")," for your repository is configured for ",Object(a.b)("inlineCode",{parentName:"li"},"gh-pages")," branch.")),Object(a.b)("h3",{id:"using-firebase"},"Using Firebase"),Object(a.b)("p",null,"We have included methods and configurations for close integration with firebase. Before proceeding with the follwing steps, please make sure that firebase is configured by following the ",Object(a.b)("a",{parentName:"p",href:"/honeycomb-docs/docs/firebase"},"Getting started with firebase section under Set Up Firebase"),"."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Run ",Object(a.b)("inlineCode",{parentName:"li"},"npm run build:firebase")," in the terminal to create a production build for firebase."),Object(a.b)("li",{parentName:"ol"},"Run ",Object(a.b)("inlineCode",{parentName:"li"},"firebase deploy")," in the terminal to deploy the production build."),Object(a.b)("li",{parentName:"ol"},"The production build is now deployed to the firebase project domain. ")),Object(a.b)("p",null,"To automate firebase deployments, we have included instructions on setting up firebase github actions on our ",Object(a.b)("a",{parentName:"p",href:"/honeycomb-docs/docs/ci#github-actions-for-firebase-hosting"},"Automated Builds page")))}u.isMDXComponent=!0}}]);